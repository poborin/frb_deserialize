// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/simple.dart';
import 'api/training_plan.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  CycleElement dco_decode_cycle_element(dynamic raw);

  @protected
  CycleType dco_decode_cycle_type(dynamic raw);

  @protected
  Day dco_decode_day(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  List<CycleElement> dco_decode_list_cycle_element(dynamic raw);

  @protected
  List<PhaseElement> dco_decode_list_phase_element(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<SessionElement> dco_decode_list_session_element(dynamic raw);

  @protected
  Phase dco_decode_phase(dynamic raw);

  @protected
  PhaseElement dco_decode_phase_element(dynamic raw);

  @protected
  SessionElement dco_decode_session_element(dynamic raw);

  @protected
  Target dco_decode_target(dynamic raw);

  @protected
  TrainingPlan dco_decode_training_plan(dynamic raw);

  @protected
  Type dco_decode_type(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  CycleElement sse_decode_cycle_element(SseDeserializer deserializer);

  @protected
  CycleType sse_decode_cycle_type(SseDeserializer deserializer);

  @protected
  Day sse_decode_day(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  List<CycleElement> sse_decode_list_cycle_element(
      SseDeserializer deserializer);

  @protected
  List<PhaseElement> sse_decode_list_phase_element(
      SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<SessionElement> sse_decode_list_session_element(
      SseDeserializer deserializer);

  @protected
  Phase sse_decode_phase(SseDeserializer deserializer);

  @protected
  PhaseElement sse_decode_phase_element(SseDeserializer deserializer);

  @protected
  SessionElement sse_decode_session_element(SseDeserializer deserializer);

  @protected
  Target sse_decode_target(SseDeserializer deserializer);

  @protected
  TrainingPlan sse_decode_training_plan(SseDeserializer deserializer);

  @protected
  Type sse_decode_type(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_cycle_element(CycleElement self, SseSerializer serializer);

  @protected
  void sse_encode_cycle_type(CycleType self, SseSerializer serializer);

  @protected
  void sse_encode_day(Day self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_cycle_element(
      List<CycleElement> self, SseSerializer serializer);

  @protected
  void sse_encode_list_phase_element(
      List<PhaseElement> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_session_element(
      List<SessionElement> self, SseSerializer serializer);

  @protected
  void sse_encode_phase(Phase self, SseSerializer serializer);

  @protected
  void sse_encode_phase_element(PhaseElement self, SseSerializer serializer);

  @protected
  void sse_encode_session_element(
      SessionElement self, SseSerializer serializer);

  @protected
  void sse_encode_target(Target self, SseSerializer serializer);

  @protected
  void sse_encode_training_plan(TrainingPlan self, SseSerializer serializer);

  @protected
  void sse_encode_type(Type self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;
}
